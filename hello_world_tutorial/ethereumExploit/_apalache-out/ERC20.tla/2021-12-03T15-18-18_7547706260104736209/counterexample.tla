---------------------------- MODULE counterexample ----------------------------

EXTENDS ERC20

(* Constant initialization state *)
ConstInit == TRUE

(* Initial state *)
State0 ==
  allowance
      = (((((((<<"addr1", "addr1">> :> 0 @@ <<"addr2", "addr1">> :> 0)
                    @@ <<"addr3", "addr1">> :> 0)
                  @@ <<"addr1", "addr2">> :> 0)
                @@ <<"addr2", "addr2">> :> 0)
              @@ <<"addr3", "addr2">> :> 0)
            @@ <<"addr1", "addr3">> :> 0)
          @@ <<"addr2", "addr3">> :> 0)
        @@ <<"addr3", "addr3">> :> 0
    /\ balanceOf = ("addr1" :> 26 @@ "addr2" :> 28) @@ "addr3" :> 29
    /\ lastTx = [fail |-> FALSE, id |-> 0, tag |-> "None"]
    /\ nextTxId = 0
    /\ pendingTransactions = {}

(* Transition 2 to State1 *)
State1 ==
  allowance
      = (((((((<<"addr1", "addr1">> :> 0 @@ <<"addr2", "addr1">> :> 0)
                    @@ <<"addr3", "addr1">> :> 0)
                  @@ <<"addr1", "addr2">> :> 0)
                @@ <<"addr2", "addr2">> :> 0)
              @@ <<"addr3", "addr2">> :> 0)
            @@ <<"addr1", "addr3">> :> 0)
          @@ <<"addr2", "addr3">> :> 0)
        @@ <<"addr3", "addr3">> :> 0
    /\ balanceOf = ("addr1" :> 26 @@ "addr2" :> 28) @@ "addr3" :> 29
    /\ lastTx = [fail |-> FALSE, id |-> 0, tag |-> "None"]
    /\ nextTxId = 1
    /\ pendingTransactions
      = {[fail |-> FALSE,
        id |-> 0,
        sender |-> "addr3",
        spender |-> "addr1",
        tag |-> "approve",
        value |-> 13]}

(* Transition 6 to State2 *)
State2 ==
  allowance
      = (((((((<<"addr1", "addr3">> :> 0 @@ <<"addr2", "addr1">> :> 0)
                    @@ <<"addr3", "addr1">> :> 13)
                  @@ <<"addr3", "addr3">> :> 0)
                @@ <<"addr2", "addr3">> :> 0)
              @@ <<"addr3", "addr2">> :> 0)
            @@ <<"addr1", "addr1">> :> 0)
          @@ <<"addr2", "addr2">> :> 0)
        @@ <<"addr1", "addr2">> :> 0
    /\ balanceOf = ("addr1" :> 26 @@ "addr2" :> 28) @@ "addr3" :> 29
    /\ lastTx
      = [fail |-> FALSE,
        id |-> 0,
        sender |-> "addr3",
        spender |-> "addr1",
        tag |-> "approve",
        value |-> 13]
    /\ nextTxId = 1
    /\ pendingTransactions = {}

(* Transition 1 to State3 *)
State3 ==
  allowance
      = (((((((<<"addr2", "addr1">> :> 0 @@ <<"addr1", "addr3">> :> 0)
                    @@ <<"addr1", "addr2">> :> 0)
                  @@ <<"addr3", "addr1">> :> 13)
                @@ <<"addr3", "addr3">> :> 0)
              @@ <<"addr1", "addr1">> :> 0)
            @@ <<"addr2", "addr3">> :> 0)
          @@ <<"addr3", "addr2">> :> 0)
        @@ <<"addr2", "addr2">> :> 0
    /\ balanceOf = ("addr1" :> 26 @@ "addr2" :> 28) @@ "addr3" :> 29
    /\ lastTx = [fail |-> FALSE, id |-> 0, tag |-> "None"]
    /\ nextTxId = 2
    /\ pendingTransactions
      = {[fail |-> FALSE,
        fromAddr |-> "addr3",
        id |-> 1,
        sender |-> "addr1",
        tag |-> "transferFrom",
        toAddr |-> "addr1",
        value |-> 5]}

(* Transition 7 to State4 *)
State4 ==
  allowance
      = (((((((<<"addr3", "addr1">> :> 8 @@ <<"addr2", "addr3">> :> 0)
                    @@ <<"addr2", "addr2">> :> 0)
                  @@ <<"addr3", "addr3">> :> 0)
                @@ <<"addr2", "addr1">> :> 0)
              @@ <<"addr3", "addr2">> :> 0)
            @@ <<"addr1", "addr2">> :> 0)
          @@ <<"addr1", "addr1">> :> 0)
        @@ <<"addr1", "addr3">> :> 0
    /\ balanceOf = ("addr1" :> 31 @@ "addr2" :> 28) @@ "addr3" :> 24
    /\ lastTx
      = [fail |-> FALSE,
        fromAddr |-> "addr3",
        id |-> 1,
        sender |-> "addr1",
        tag |-> "transferFrom",
        toAddr |-> "addr1",
        value |-> 5]
    /\ nextTxId = 2
    /\ pendingTransactions = {}

(* Transition 1 to State5 *)
State5 ==
  allowance
      = (((((((<<"addr2", "addr2">> :> 0 @@ <<"addr1", "addr1">> :> 0)
                    @@ <<"addr3", "addr3">> :> 0)
                  @@ <<"addr1", "addr2">> :> 0)
                @@ <<"addr2", "addr1">> :> 0)
              @@ <<"addr3", "addr1">> :> 8)
            @@ <<"addr1", "addr3">> :> 0)
          @@ <<"addr3", "addr2">> :> 0)
        @@ <<"addr2", "addr3">> :> 0
    /\ balanceOf = ("addr1" :> 31 @@ "addr2" :> 28) @@ "addr3" :> 24
    /\ lastTx = [fail |-> FALSE, id |-> 0, tag |-> "None"]
    /\ nextTxId = 3
    /\ pendingTransactions
      = {[fail |-> FALSE,
        fromAddr |-> "addr3",
        id |-> 2,
        sender |-> "addr1",
        tag |-> "transferFrom",
        toAddr |-> "addr2",
        value |-> 22]}

(* Transition 2 to State6 *)
State6 ==
  allowance
      = (((((((<<"addr3", "addr1">> :> 8 @@ <<"addr2", "addr3">> :> 0)
                    @@ <<"addr1", "addr3">> :> 0)
                  @@ <<"addr2", "addr1">> :> 0)
                @@ <<"addr1", "addr1">> :> 0)
              @@ <<"addr2", "addr2">> :> 0)
            @@ <<"addr3", "addr3">> :> 0)
          @@ <<"addr3", "addr2">> :> 0)
        @@ <<"addr1", "addr2">> :> 0
    /\ balanceOf = ("addr1" :> 31 @@ "addr2" :> 28) @@ "addr3" :> 24
    /\ lastTx = [fail |-> FALSE, id |-> 0, tag |-> "None"]
    /\ nextTxId = 4
    /\ pendingTransactions
      = { [fail |-> FALSE,
          fromAddr |-> "addr3",
          id |-> 2,
          sender |-> "addr1",
          tag |-> "transferFrom",
          toAddr |-> "addr2",
          value |-> 22],
        [fail |-> FALSE,
          id |-> 3,
          sender |-> "addr3",
          spender |-> "addr1",
          tag |-> "approve",
          value |-> 24] }

(* Transition 6 to State7 *)
State7 ==
  allowance
      = (((((((<<"addr3", "addr3">> :> 0 @@ <<"addr3", "addr1">> :> 24)
                    @@ <<"addr2", "addr2">> :> 0)
                  @@ <<"addr2", "addr3">> :> 0)
                @@ <<"addr3", "addr2">> :> 0)
              @@ <<"addr1", "addr3">> :> 0)
            @@ <<"addr2", "addr1">> :> 0)
          @@ <<"addr1", "addr2">> :> 0)
        @@ <<"addr1", "addr1">> :> 0
    /\ balanceOf = ("addr1" :> 31 @@ "addr2" :> 28) @@ "addr3" :> 24
    /\ lastTx
      = [fail |-> FALSE,
        id |-> 3,
        sender |-> "addr3",
        spender |-> "addr1",
        tag |-> "approve",
        value |-> 24]
    /\ nextTxId = 4
    /\ pendingTransactions
      = {[fail |-> FALSE,
        fromAddr |-> "addr3",
        id |-> 2,
        sender |-> "addr1",
        tag |-> "transferFrom",
        toAddr |-> "addr2",
        value |-> 22]}

(* Transition 7 to State8 *)
State8 ==
  allowance
      = (((((((<<"addr2", "addr1">> :> 0 @@ <<"addr2", "addr2">> :> 0)
                    @@ <<"addr2", "addr3">> :> 0)
                  @@ <<"addr1", "addr1">> :> 0)
                @@ <<"addr3", "addr3">> :> 0)
              @@ <<"addr1", "addr3">> :> 0)
            @@ <<"addr3", "addr1">> :> 2)
          @@ <<"addr3", "addr2">> :> 0)
        @@ <<"addr1", "addr2">> :> 0
    /\ balanceOf = ("addr1" :> 31 @@ "addr2" :> 50) @@ "addr3" :> 2
    /\ lastTx
      = [fail |-> FALSE,
        fromAddr |-> "addr3",
        id |-> 2,
        sender |-> "addr1",
        tag |-> "transferFrom",
        toAddr |-> "addr2",
        value |-> 22]
    /\ nextTxId = 4
    /\ pendingTransactions = {}

(* The following formula holds true in the last state and violates the invariant *)
InvariantViolation ==
  LET Call_trace ==
    <<
      [lastTx |-> $C$45,
        nextTxId |-> $C$31,
        allowance |-> $C$41,
        pendingTransactions |-> $C$43,
        balanceOf |-> $C$11], [lastTx |-> $C$120,
        nextTxId |-> $C$130,
        allowance |-> $C$41,
        pendingTransactions |-> $C$121,
        balanceOf |-> $C$11], [lastTx |-> $C$570,
        nextTxId |-> $C$647,
        allowance |-> $C$646,
        pendingTransactions |-> $C$590,
        balanceOf |-> $C$589], [lastTx |-> $C$1373,
        nextTxId |-> $C$1451,
        allowance |-> $C$1450,
        pendingTransactions |-> $C$1394,
        balanceOf |-> $C$1393], [lastTx |-> $C$2297,
        nextTxId |-> $C$2375,
        allowance |-> $C$2374,
        pendingTransactions |-> $C$2318,
        balanceOf |-> $C$2317], [lastTx |-> $C$3341,
        nextTxId |-> $C$3455,
        allowance |-> $C$3454,
        pendingTransactions |-> $C$3362,
        balanceOf |-> $C$3361], [lastTx |-> $C$4541,
        nextTxId |-> $C$4628,
        allowance |-> $C$4627,
        pendingTransactions |-> $C$4562,
        balanceOf |-> $C$4561], [lastTx |-> $C$5834,
        nextTxId |-> $C$5957,
        allowance |-> $C$5956,
        pendingTransactions |-> $C$5855,
        balanceOf |-> $C$5854], [lastTx |-> $C$7283,
        nextTxId |-> $C$7397,
        allowance |-> $C$7396,
        pendingTransactions |-> $C$7304,
        balanceOf |-> $C$7303]
    >>
  IN
  Skolem((\E spender$3 \in { "addr1", "addr2", "addr3" }:
    Skolem((\E fromAddr$3 \in { "addr1", "addr2", "addr3" }:
      LET TransferIndices_si_2 ==
        {
          i$4 \in DOMAIN Call_trace:
            LET tx_si_8 == (Call_trace)[i$4]["lastTx"] IN
            (tx_si_8)["tag"] = "transferFrom"
              /\ ~((tx_si_8)["fail"])
              /\ (tx_si_8)["fromAddr"] = fromAddr$3
              /\ (tx_si_8)["sender"] = spender$3
              /\ 0 < (tx_si_8)["value"]
        }
      IN
      LET SumOfTransfers_si_2 ==
        FoldSet(LET t_7_si_2(sum_si_2, i_si_5) ==
          sum$2 + (Call_trace)[i$5]["lastTx"]["value"]
        IN
        t_7$2, 0, (TransferIndices_si_2))
      IN
      LET ExistsApprovalForSumInPast_si_2 ==
        \E i$6 \in DOMAIN Call_trace:
          LET approval_tx_si_2 == (Call_trace)[i$6]["lastTx"] IN
          (approval_tx_si_2)["tag"] = "approve"
            /\ spender$3 = (approval_tx_si_2)["spender"]
            /\ fromAddr$3 = (approval_tx_si_2)["sender"]
            /\ (\A j$2 \in TransferIndices_si_2: i$6 < j$2)
            /\ ~((approval_tx_si_2)["fail"])
            /\ SumOfTransfers_si_2 <= (approval_tx_si_2)["value"]
      IN
      SumOfTransfers_si_2 > 0 /\ ~ExistsApprovalForSumInPast_si_2))))

================================================================================
(* Created by Apalache on Fri Dec 03 15:20:40 CET 2021 *)
(* https://github.com/informalsystems/apalache *)
